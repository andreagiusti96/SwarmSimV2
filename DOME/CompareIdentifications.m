%
% CompareIdentifications Compare the result of multiple identification porocedures.
%   This script allows to compare the identified behaviour of different microorganisms, 
%   or resulting from different experiments, or different identification
%   approaches.
%
%   To run this script you need the identification data with the kinematic 
%   parameters of the digital twins. This data can be generated by IdentifyDOMEexp.
%
%   See also: IdentifyDOMEexp.
%
%   Authors:    Andrea Giusti and Davide Salzano
%   Date:       2024
%

clear
close all

% Add the path to your data
% experiments_folder="C:\Users\david\OneDrive - UniversitÃ  di Napoli Federico II\Research\Data\DOME\";    % DAVIDE
experiments_folder="/Volumes/DOMEPEN/Experiments/comparisons";                                          % ANDREA

outputDir = experiments_folder;

% id_folder = fullfile(experiments_folder,"Euglena_switch_10","combo5"); %Euglena
% id_folder = fullfile(experiments_folder,"Volvox_switch_10","combo5"); %Volvox

% identification_file_names = ["identification_OLS_ds1_sign.txt","identification_OLS_ds2_sign.txt","identification_OLS_ds3_sign.txt";
%                              %"identification_OLS_ds1_abs.txt","identification_OLS_ds2_abs.txt","identification_OLS_ds3_abs.txt";
%                              "identification_GB_ds1_sign.txt","identification_GB_ds2_sign.txt","identification_GB_ds3_sign.txt";
%                              "identification_GBCT_ds1_sign_grad.txt","identification_GBCT_ds2_sign_grad.txt","identification_GBCT_ds3_sign_grad.txt";
%                              "identification_GBCT_ds1_sign_diff.txt","identification_GBCT_ds2_sign_diff.txt","identification_GBCT_ds3_sign_diff.txt"];

% identification_file_names = ["identification_OLS_ds1_sign_grad.txt","identification_OLS_ds2_sign_grad.txt","identification_OLS_ds3_sign_grad.txt";
%     "identification_GBCT_ds1_sign_grad.txt","identification_GBCT_ds2_sign_grad.txt","identification_GBCT_ds3_sign_grad.txt"];
% tags = ["OLS","GBDT","GBCT grad","GBCT diff"];
% 
% identification_file_names = ["identification_OLS+GB_ds1_old.txt";
%     "identification_OLS+GB_ds1_diff.txt";
%     "identification_OLS+GB_ds1_diff_min20.txt";
%     "identification_OLS+GB_ds1_diff_noalpha.txt";
%     "identification_OLS+GB_ds1_diff_nosign.txt";
%     "identification_OLS+GB_ds1_diff_median";
%     "identification_OLS+GB_ds1_diff_smooth_median";
%     "identification_OLS+GB_ds1_diff_median_smooth";
%     "identification_OLS+GB_ds1_diff_smooth_median_smooth"];
% tags = ["old","min=5s","min=20s","no\_alpha","nosign","med","smooth_med","med_smooth","s_med_s"];
% 
% identification_file_names =    ["identification_OLS+GB_ds1_diff_sign.txt";
%     "identification_OLS+GB_ds1_diff_nosign.txt";
%     "identification_OLS+GB_ds1_diff_sign_nomu.txt";
%     "identification_OLS+GB_ds1_diff_nosign_nomu.txt"];
% tags = ["signed","nosign","signed-nomu","nosign-nomu"];
% 
% identification_file_names =    ["identification_GA_nolim.txt";      "identification_GB_nolim";
%                                 "identification_GA_nolim_nomu.txt"; "identification_GB_nolim_nomu.txt";
%                                 "identification_GA_lim.txt";        "identification_GB_lim.txt";
%                                 "identification_GA_lim_nomu.txt";   "identification_GB_lim_nomu.txt";
%                                 ];
% tags = ["GA_nolim","GB_nolim","GA_nolim_nomu","GB_nolim_nomu","GA_lim","GB_lim","GA_lim_nomu","GB_lim_nomu"];
% 
% identification_file_names =    [ "identification_GB_lim"; "identification_GB_lim_nomu"; 
%                                  "identification_GB_lim_v_nomu"; "identification_GB_lim_w_nomu";
%                                  "identification_GB_lim_b_nomu"; 
%                                  "identification_GB_lim_bv_nomu"; "identification_GB_lim_bw_nomu";
%                                  "identification_GB_lim_b"; "identification_GB_lim_b_discardmu"];
% tags = ["GB_lim","GB_lim_nomu","GB_lim_v_nomu","GB_lim_w_nomu","GB_lim_b_nomu","GB_lim_bv_nomu","GB_lim_bw_nomu","GB_lim_b","GB_lim_b_discardmu"];
% 
% identification_file_names =    [ "identification_manual"; "identification_GB_median"; 
%                                  "identification_GB_absw_noalpha"; "identification_GB_absw_alphaw+"; 
%                                  "identification_GB_absw_alphaw";  "identification_GB_absw_alpha";
%                                  "identification_GB_absw_alpha_noinit"; "identification_GB_absw_alpha_medianinit";
%                                  "identification_GB_absw_alphav_medianinit"; "identification_GB_absw_alphav+_medianinit"];
% tags = ["manual","median","absw_noalpha","absw_alphaw+","absw_alphaw","absw_alpha","alpha_noinit","alpha_medinit","alphav_medinit","alphav+_medinit"];
%
% identification_file_names =    [ "identification_GB_absw_alpha_noinit"; "identification_GB_absw_alpha_medianinit";
%                                  "identification_GB_absw_alphav_medianinit"; "identification_GB_absw_alphav+_medianinit"];
% tags = ["alpha_noinit","alpha_medinit","alphav_medinit","alphav+_medinit"];
% identification_file_names =    ["identification_GB_median";"identification_GB_absw_noalpha"; "identification_GB_absw_noalpha_narrow"; "identification_GB_absw_noalpha_narrow05"];
% tags = ["median","no_alpha","noalpha_narrow1","noalpha_narrow05"];

% identification_file_names =    ["identification_GB_absw_noalpha_narrow"; "identification_GB_absw_meaninit"; "identification_GB_absw_noinit"];
% tags = ["medianinit", "meaninit", "noinit"];

% identification_file_names =    ["identification_GB_meaninit"; "identification_GB_60s"];
% tags = ["10s", "60s"];

id_folder = [fullfile(experiments_folder,"Euglena_switch_10","combo5"); fullfile(experiments_folder,"Volvox_switch_10","combo5")];
identification_file_names =    ["identification_GB_absw_noalpha_narrow"; "identification_GB_60s"];
tags = ["Euglena", "Volvox"];


dT = 0.01;
deltaT = 0.5;

%% LOAD DATA
identifications={};
for i=1:size(identification_file_names,2)   % for each down sampling value
    for j=1:size(identification_file_names,1)   % for each technique
        if size(id_folder,1) == 1
            identifications{j,i}=readtable(fullfile(id_folder,identification_file_names(j,i)));
        else
            identifications{j,i}=readtable(fullfile(id_folder(j),identification_file_names(j,i)));
        end
    end
end

speed=load(fullfile(id_folder(j),'speeds_smooth.txt'));
omega=load(fullfile(id_folder(j),'ang_vel_smooth.txt'));
inputs=load(fullfile(id_folder(j),'inputs.txt'));
timeInstants = [0:size(speed,1)-1] * deltaT;
u=inputs(:,1)/255;
u_dot = [0;diff(u)]/deltaT;
%u_dot = gradient(u)/deltaT;
u_dot = max(u_dot,0);

%% simulate average behaviour
t_sim=0:dT:max(timeInstants);
s_sim=nan(length(t_sim),1);
w_sim=nan(length(t_sim),1);
u_sim=nan(length(t_sim),2);
for j=1:size(identification_file_names,1)       % for each technique
    for i=1:size(identification_file_names,2)   % for each down sampling value
        theta_s_mean=median(identifications{j,i}.theta_s);
        mu_s_mean   =median(identifications{j,i}.mu_s);
        alpha_s_mean=median(identifications{j,i}.alpha_s);
        beta_s_mean =median(identifications{j,i}.beta_s);
        theta_w_mean=median(identifications{j,i}.theta_w);
        mu_w_mean   =median(abs(omega),'all','omitnan');
        alpha_w_mean=median(identifications{j,i}.alpha_w);
        beta_w_mean =median(identifications{j,i}.beta_w);
        s_sim(1)=mu_s_mean;
        w_sim(1)=mu_w_mean;
        for t=1:length(t_sim)-1                 % for each time instant
            u_sim(t,:)= [u(ceil(t*dT/deltaT)),u_dot(ceil(t*dT/deltaT))];
            s_sim(t+1)= s_sim(t) + (theta_s_mean * (mu_s_mean-s_sim(t)) + alpha_s_mean * u_sim(t,1) + beta_s_mean * u_sim(t,2) ) *dT;
            w_sim(t+1)= w_sim(t) + (theta_w_mean * (mu_w_mean-w_sim(t)) + alpha_w_mean * u_sim(t,1) + beta_w_mean * u_sim(t,2) ) *dT;
        end
        
        nmse_med_speed(j,i) = goodnessOfFit(interp1(t_sim,s_sim,timeInstants)', median(speed,2,'omitnan'), 'NMSE');
        nmse_med_omega(j,i) = goodnessOfFit(interp1(t_sim,w_sim,timeInstants)', median(abs(omega),2,'omitnan'), 'NMSE');
        nmse_med_total(j,i) = mean([nmse_med_speed(j,i), nmse_med_omega(j,i)]);
        
        wmape_speed(j,i) = mape(interp1(t_sim,s_sim,timeInstants)', median(speed,2,'omitnan'),'wMAPE');
        wmape_omega(j,i) = mape(interp1(t_sim,w_sim,timeInstants)', median(abs(omega),2,'omitnan'),'wMAPE');
        wmape_total(j,i) = mean([wmape_speed(j,i), wmape_omega(j,i)]);
    end
end



%% PRINT RESULTS

% metrics_of_interest = {nmse_speed, nmse_omega, nmse_total}; metrics_tags = ["nmse_v", "nmse_\omega", "nmse_{tot}"];
% metrics_of_interest = {mape_speed, mape_omega, mape_total}; metrics_tags = ["mape_v", "mape_\omega", "mape_{tot}"];
metrics_of_interest = {wmape_speed, wmape_omega, wmape_total}; metrics_tags = ["wmape_v", "wmape_\omega", "wmape_{tot}"];
% metrics_of_interest = {nmse_total, mape_total, wmape_total}; metrics_tags = ["nmse_{tot}", "mape_{tot}", "wmape_{tot}"];
metrics_color = ['b','r','k'];

fprintf(join(['Tech','DS',repmat("%s",1,length(identifications{1,1}.Properties.VariableNames)-5)],'\t'),identifications{j,1}.Properties.VariableNames{2:end-4})
fprintf(join(['\t',repmat("%s",1,length(metrics_tags)),'\n'],'\t'),metrics_tags)
for j=1:size(identification_file_names,1) % for each technique
    disp(tags(j))
    for i=1:size(identification_file_names,2) % for each down sampling value
        % print average parameters value
        fprintf(join(['',num2str(i),repmat("%.2f",1,length(identifications{j,i}.Properties.VariableNames)-5)],'\t'),mean(identifications{j,i}{:,2:end-4}))
        % print metrics
        for k=1:length(metrics_of_interest); data_to_print(k) = metrics_of_interest{k}(j,i); end
        fprintf(join(['',repmat("%.2f",1,length(metrics_of_interest))],'\t\t'),data_to_print)
        fprintf('\n')
    end
end

if size(identification_file_names,2)>1 % if considering multiple down sampling values
    figure % Parameters
    colors = get(gca,'ColorOrder');
    for k=1:10 % for each parameter
        ax=subplot(2,5,k);
        
        for j=1:size(identification_file_names,1) % for each technique
            medians = [median(identifications{j,1}{:,k+1}), median(identifications{j,2}{:,k+1}), median(identifications{j,3}{:,k+1})];
            quartiles1 = [quantile(identifications{j,1}{:,k+1},0.25), quantile(identifications{j,2}{:,k+1},0.25), quantile(identifications{j,3}{:,k+1},0.25)];
            quartiles3 = [quantile(identifications{j,1}{:,k+1},0.75), quantile(identifications{j,2}{:,k+1},0.75), quantile(identifications{j,3}{:,k+1},0.75)];
            line=plotWithShade([1,2,3],medians,quartiles1,quartiles3, colors(j,:), 0.3);
        end
        legend({'',tags(1),'',tags(2)})
        xticks([1,2,3])
        title(identifications{1}.Properties.VariableNames(k+1))
    end
    if ~isempty(outputDir)
        saveas(gcf, fullfile(outputDir, 'id_comparison_parameters'))
        saveas(gcf, fullfile(outputDir, 'id_comparison_parameters'),'png')
    end
    
    figure % NMSE
    rng = max([nmse_med_speed,nmse_mean_speed,nmse_med_omega,nmse_mean_omega],[],'all');
    for j=1:size(identification_file_names,1) % for each technique
        subplot(3,2,1); hold on
        plot([1,2,3], nmse_mean_speed(j,:), 'color', colors(j,:), 'marker', 'o')
        title('NMSE mean s')
        legend(tags(1:j))
        xticks([1,2,3])
        ylim([0 rng])
        subplot(3,2,2); hold on
        plot([1,2,3], nmse_med_speed(j,:), 'color', colors(j,:), 'marker', 'o')
        title('NMSE med s')
        legend(tags(1:j))
        xticks([1,2,3])
        ylim([0 rng])
        
        subplot(3,2,3); hold on
        plot([1,2,3], nmse_mean_omega(j,:), 'color', colors(j,:), 'marker', 'o')
        title('NMSE mean w')
        legend(tags(1:j))
        xticks([1,2,3])
        ylim([0 rng])
        subplot(3,2,4); hold on
        plot([1,2,3], nmse_med_omega(j,:), 'color', colors(j,:), 'marker', 'o')
        title('NMSE med w')
        legend(tags(1:j))
        xticks([1,2,3])
        ylim([0 rng])
        
        subplot(3,2,5); hold on
        plot([1,2,3], nmse_mean_total(j,:), 'color', colors(j,:), 'marker', 'o')
        title('NMSE mean tot')
        legend(tags(1:j))
        xticks([1,2,3])
        ylim([0 rng])
        subplot(3,2,6); hold on
        plot([1,2,3], nmse_med_total(j,:), 'color', colors(j,:), 'marker', 'o')
        title('NMSE med tot')
        legend(tags(1:j))
        xticks([1,2,3])
        ylim([0 rng])
    end
    
else % if considering a single down sampling value
    
    figure('Position',[100 100 1900 600]); % PARAMETERS BOXPLOTS
    for k=1:10 % for each parameter
        ax=subplot(2,5,k);
        
        for j=1:size(identification_file_names,1); data_to_plot{j} = identifications{j,1}{:,k+1}; end
        myboxplot(data_to_plot, false, 3);
        xticks([])
        set(ax,'PositionConstraint','innerposition')
        yline(0,'Color',[0.5,0.5,0.5])
        %l=max(identification.(i+1))*1.1;ylim([-l/15,l]);yticks([0:l/3:l])
        xlabel(identifications{1}.Properties.VariableNames(k+1))
        set(gca,'FontSize',16)
    end
    legend(tags,"AutoUpdate","off",'Interpreter','none','Orientation','horizontal','Position',[0.1 0.95 0.8 0.04])
    legend('Position',[0.1 0.95 0.8 0.04])
    legend('Box','off')
    if ~isempty(outputDir)
        fig=gcf; fig.Units = fig.PaperUnits; fig.PaperSize = fig.Position(3:4); % set correct pdf size
        saveas(gcf, fullfile(outputDir, 'id_comparison_parameters'))
        saveas(gcf, fullfile(outputDir, 'id_comparison_parameters'),'pdf')
    end
    
    figure('Position',[100 100 500 350]); % NUMBER OF PARAMETERS SETS
    hold on
    for j=1:size(identification_file_names,1)
        len(j) = size(identifications{j,1},1);
        bar(j,len(j))
        text(j, len(j)*0.5, num2str(len(j)), HorizontalAlignment='center', FontSize=12)
    end
    box
    xticks([1:j])    
    xticklabels(tags) 
    title('Number of digital twins')
    if ~isempty(outputDir)
        fig=gcf; fig.Units = fig.PaperUnits; fig.PaperSize = fig.Position(3:4); % set correct pdf size
        saveas(gcf, fullfile(outputDir, 'id_comparison_number'))
        saveas(gcf, fullfile(outputDir, 'id_comparison_number'),'pdf')
    end
    
%     figure('Position',[100 100 1900 600]); % metrics scatter comparison
%     hold on
%     for k=1:length(metrics_of_interest)
%         plots(k,:)=scatter([1:length(tags)]-(length(metrics_of_interest)-1)*0.1+(k-1)*0.2,metrics_of_interest{k},50,metrics_color(k));
%         scatter([1:length(tags)]-(length(metrics_of_interest)-1)*0.1+(k-1)*0.2,metrics_of_interest{k}(:,1),50,metrics_color(k),"filled");
%     end
%     xticks([1:length(tags)])
%     xticklabels(tags)
%     set(gca, 'TickLabelInterpreter', 'none');
%     xlim([0,length(tags)+1])
%     ylim([0, max([metrics_of_interest{:}],[],'all')*1.1])
%     legend(plots(:,1),metrics_tags)
%     set(gca,'FontSize',14)
%     box on
%     set(gca,'XGrid','off','YGrid','on')

    
end

